{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["editorConfig","holder","tools","math","class","Math","Color","config","colorCollections","defaultColor","type","Marker","data","blocks","App","editor","useRef","useEffect","initEditor","current","id","editorInstance","EditorJS","onChange","handleEditorTextChange","eNode","a","saver","save","editorSavedData","className","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAKaA,EACT,CACIC,OAAQ,WACRC,MAAO,CACHC,KAAM,CACFC,MAAOC,KAEXC,MAAO,CACHF,MAAOE,IACPC,OAAQ,CACJC,iBAbK,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAW,QAcrHC,aAbC,UAcDC,KAAM,SAGdC,OAAQ,CACJP,MAAOE,IACPC,OAAQ,CACJE,aAAc,UACdC,KAAM,YAIlBE,KAAM,CAAEC,OAAQ,CACR,CACI,KAAS,YACT,KAAS,CACL,KAAS,wBAGjB,CACI,KAAS,OACT,KAAS,CACL,KAAS,mCCDlBC,EAhCH,WACR,IAAMC,EAASC,mBAEfC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAa,WACf,GAAIH,EAAOI,QAAS,CAChBJ,EAAOI,QAAQC,GAAK,WACpB,IAAMC,EAAiB,IAAIC,IAAStB,GACpCA,EAAauB,SAAW,WACpBC,EAAuBH,MAK7BG,EAAsB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACGD,EAAME,MAAMC,OADf,OACrBC,EADqB,OAERA,EAAXhB,OAFmB,2CAAH,sDAK9B,OACE,yBAAKiB,UAAU,OACb,yBACIC,IAAKhB,EACLe,UAAU,aCnBAE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ff113e6.chunk.js","sourcesContent":["import Math from \"editorjs-math\";\nimport Color from \"editorjs-text-color-plugin\";\nconst colorCollections = ['#FF1300','#EC7878','#9C27B0','#673AB7','#3F51B5','#0070FF','#03A9F4','#00BCD4','#4CAF50','#8BC34A','#CDDC39', '#FFF'];\nconst defaultColor = '#FF1300';\n\nexport const editorConfig =\n    {\n        holder: \"editorjs\",\n        tools: {\n            math: {\n                class: Math,\n            },\n            Color: {\n                class: Color,\n                config: {\n                    colorCollections,\n                    defaultColor,\n                    type: 'text',\n                }\n            },\n            Marker: {\n                class: Color,\n                config: {\n                    defaultColor: '#FFBF00',\n                    type: 'marker',\n                }\n            },\n        },\n        data: { blocks: [\n                {\n                    \"type\" : \"paragraph\",\n                    \"data\" : {\n                        \"text\" : \"editor plugin demos\",\n                    }\n                },\n                {\n                    \"type\" : \"math\",\n                    \"data\" : {\n                        \"text\" : \"sqrt(9 / 3) - cos(pi / 4)^2\",\n                    }\n                },\n            ]\n        }\n    };\n","import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport EditorJS from '@editorjs/editorjs';\nimport { editorConfig } from './config';\n\nconst App = () => {\n    const editor = useRef();\n\n    useEffect(() => {\n        initEditor();\n    }, []);\n\n    const initEditor = () => {\n        if (editor.current) {\n            editor.current.id = \"editorjs\";\n            const editorInstance = new EditorJS(editorConfig);\n            editorConfig.onChange = () => {\n                handleEditorTextChange(editorInstance);\n            }\n        }\n    };\n\n    const handleEditorTextChange = async (eNode) => {\n        const editorSavedData = await eNode.saver.save();\n        const { blocks } = editorSavedData;\n    };\n\n  return (\n    <div className=\"App\">\n      <div\n          ref={editor}\n          className=\"editor\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}