{"version":3,"sources":["Slides/assets/presentation.png","Slides/components/slidesBtn.js","Slides/components/slides.js","Slides/index.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SlidesButton","props","src","presentSlides","btnClassName","className","PRESENTATION","onClick","Slides","reveal","slides","slidesData","id","ref","hidden","length","map","sDetail","i","key","dangerouslySetInnerHTML","__html","EditorSlides","slidesConfig","theme","useState","setSlidesData","useRef","useEffect","current","fillSlidesData","blocks","document","getElementsByClassName","newSlideData","singleBlock","innerText","push","innerHTML","initSlides","revealNode","deckInstance","Reveal","embedded","initSlidesInstance","configSlidesInstance","ins","initialize","slideNumber","configure","keyboard","70","27","removeRevealNode","13","32","enterFullscreen","element","requestMethod","documentElement","requestFullscreen","webkitRequestFullscreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen","apply","cacheData","localStorage","getItem","editorConfig","holder","tools","math","class","Math","Color","config","colorCollections","defaultColor","type","Marker","data","JSON","parse","App","editor","initEditor","editorInstance","EditorJS","onChange","handleEditorTextChange","eNode","a","saver","save","editorSavedData","setItem","stringify","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81b855e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/presentation.b66bbadc.png\";","import React from 'react';\nimport PRESENTATION from '../assets/presentation.png';\n\nconst SlidesButton = (props) => {\n    const { src, presentSlides, btnClassName } = props;\n\n    return (\n        <div className={btnClassName}>\n            <img\n                className=\"slides-btn\"\n                src={src || PRESENTATION}\n                onClick={presentSlides} />\n        </div>\n    );\n};\n\nexport default SlidesButton;\n","import React, { useEffect, useState, useRef } from 'react';\n\nconst Slides = (props) => {\n    const { reveal, slides, slidesData } = props;\n\n    return (\n        <div className=\"reveal\" id=\"reveal-node\" ref={reveal} hidden>\n            <div className=\"slides\" ref={slides}>\n                {\n                    slidesData.length\n                        ? slidesData.map((sDetail, i) =>\n                            <section key={'slide' + i}\n                                     dangerouslySetInnerHTML={{ __html : sDetail }}\n                            />)\n                        : null\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Slides;\n","import React, { useEffect, useState, useRef } from 'react';\nimport SlidesButton from './components/slidesBtn';\nimport Slides from './components/slides';\nimport Reveal from 'reveal.js';\nimport 'reveal.js/dist/reveal.css';\nimport './index.css';\n\nconst EditorSlides = (props) => {\n    const { src, btnClassName, slidesConfig, theme } = props;\n    const [slidesData, setSlidesData] = useState([]);\n    const reveal = useRef();\n    const slides = useRef();\n\n    useEffect(() => {\n        const slidesNotInitiated = !reveal.current;\n        if (slidesNotInitiated) return;\n    }, []);\n\n    const presentSlides = () => {\n        const notInitYet = !slidesData.length;\n        if (notInitYet) {\n            initSlides();\n        }\n        fillSlidesData();\n        reveal.current.hidden = false;\n        enterFullscreen();\n    }\n\n    const fillSlidesData = () => {\n        const blocks = document.getElementsByClassName('ce-block');\n        const newSlideData = [];\n        if (blocks.length) {\n            for (var i = 0; i < blocks.length; i++) {\n                const singleBlock = blocks[i];\n                const hasContent = singleBlock.innerText.length;\n                if (hasContent) newSlideData.push(singleBlock.innerHTML);\n            }\n        }\n        setSlidesData(newSlideData);\n    };\n\n    const initSlides = () => {\n        const revealNode = reveal.current;\n\n        if (revealNode) {\n            const deckInstance = new Reveal(revealNode, { embedded: true });\n            initSlidesInstance(deckInstance);\n            configSlidesInstance(deckInstance);\n        }\n    };\n\n    const initSlidesInstance = (ins) => {\n        ins.initialize({ slideNumber: false });\n    }\n\n    const configSlidesInstance = (ins) => {\n        ins.configure({\n            keyboard: {\n                70: null, // F\n                27: removeRevealNode, // esc\n                13: 'next', // enter\n                32: null // space\n            }\n        });\n    }\n\n    const removeRevealNode = () => {\n        if (reveal.current) reveal.current.hidden = true;\n    };\n\n    const enterFullscreen = () => {\n        let element = reveal.current;\n        if (element.hidden !== true) {\n            element = element || document.documentElement;\n\n            const requestMethod = element.requestFullscreen ||\n                element.webkitRequestFullscreen ||\n                element.webkitRequestFullScreen ||\n                element.mozRequestFullScreen ||\n                element.msRequestFullscreen;\n\n            if( requestMethod ) {\n                requestMethod.apply(element);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <Slides reveal={reveal} slides={slides} slidesData={slidesData} />\n            <SlidesButton src={src} btnClassName={btnClassName} presentSlides={presentSlides} />\n        </div>\n    )\n};\n\nexport default EditorSlides;\n","import Math from \"editorjs-math\";\nimport Color from \"editorjs-text-color-plugin\";\nconst colorCollections = ['#FF1300','#EC7878','#9C27B0','#673AB7','#3F51B5','#0070FF','#03A9F4','#00BCD4','#4CAF50','#8BC34A','#CDDC39', '#FFF'];\nconst defaultColor = '#FF1300';\nconst initData = [\n    {\n        \"type\" : \"paragraph\",\n        \"data\" : {\n            \"text\" : \"editor plugin demos\",\n        }\n    },\n    {\n        \"type\" : \"math\",\n        \"data\" : {\n            \"text\" : \"\\\\{1,2,3,\\\\ldots ,n\\\\}\",\n        }\n    },\n];\nconst cacheData = localStorage.getItem('blockCache');\n\nexport const editorConfig =\n    {\n        holder: \"editorjs\",\n        tools: {\n            math: {\n                class: Math,\n            },\n            Color: {\n                class: Color,\n                config: {\n                    colorCollections,\n                    defaultColor,\n                    type: 'text',\n                }\n            },\n            Marker: {\n                class: Color,\n                config: {\n                    defaultColor: '#FFBF00',\n                    type: 'marker',\n                }\n            },\n        },\n        data: { blocks:  cacheData ? JSON.parse(cacheData) : initData }\n    };\n","import React, { useEffect, useRef } from 'react';\nimport EditorJS from '@editorjs/editorjs';\nimport Slides from '../src/Slides';\nimport { editorConfig } from './config';\nimport './App.css';\n\nconst App = () => {\n    const editor = useRef();\n\n    useEffect(() => {\n        initEditor();\n    }, []);\n\n    const initEditor = () => {\n        if (editor.current) {\n            editor.current.id = \"editorjs\";\n            const editorInstance = new EditorJS(editorConfig);\n            editorConfig.onChange = () => {\n                handleEditorTextChange(editorInstance);\n            }\n        }\n    };\n\n    const handleEditorTextChange = async (eNode) => {\n        const editorSavedData = await eNode.saver.save();\n        const { blocks } = editorSavedData;\n        localStorage.setItem('blockCache', JSON.stringify(blocks));\n        console.log(blocks);\n    };\n\n  return (\n    <div className=\"App\">\n        <section className=\"editor-wrapper\">\n            <Slides btnClassName=\"slides-btn-wrapper\"/>\n            <div ref={editor} className=\"editor\"/>\n        </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}